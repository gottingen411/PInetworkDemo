rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
########################################
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
chickwts #Visually inspect the data.
summary(chickwts) #Returns the five-number summary, along with the mean,
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
#We are specifically interested in the casein and meatmeal diet types. Do the
#reported chick weights have the same variance? To determine, conduct an F-test:
var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
summary(aov(chickwts$weight ~ chickwts$feed))
t.test(chickwts$weight, mu = 280, alternative = "less")
##################################
#####X^2 Test of Independence#####
##################################
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
pnorm(q=2)
pnorm(q=-2)
pnorm(q=2)
pnorm(q=1)
pnorm(q=0)
?pnorm
pnorm(q=3)
pnorm(q=0.5)
pnorm(q=1)
rnorm(q=1)
pnorm(q=1)
pnorm(q=3)
pnorm(sd=3)
dnorm(x)
dnorm(c(1,2,3,4))
pnorm(q=2)
pnorm(q=3)
pnorm(q=0)
pnorm(q=1)
pnorm(q=(1,2))
pnorm(q=c(1,2))
pnorm(q=0
)
pnorm(q=1)-pnorm(q=-1)
?runif
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
summary(temp)
head(temp)
plot(density(temp$Body.Temp),main="Sample Distribution of Body Temp")
library(dplyr)
library(ggplot2)
tempG=group_by(temp,gender)
tempG=group_by(temp,Gender)
summary(tempG)
str(tempG)
summarise(tempG,mean(Body.Temp))
summarise(tempG,std(Body.Temp))
summarise(tempG,sd(Body.Temp))
summarise(tempG,mean(Heart.Rate))
summarise(tempG,sd(Heart.Rate))
ggplot(df, aes(x=Body.Temp, color=Gender)) +
geom_density()
ggplot(temp, aes(x=Body.Temp, color=Gender)) +
geom_density()
ggplot(temp, aes(x=Heart.Rate color=Gender)) +
ggplot(temp, aes(x=Heart.Rate, color=Gender)) +
geom_density()
ggplot(temp, aes(x=Body.Temp, color=Gender)) +
geom_density()
?cor()
cor(temp$Body.Temp, y = temp$Heart.Rate, use = "everything",
method = c("pearson", "kendall", "spearman"))
?t.test
t.test(temp$Body.Temp,mu=98.6)
summary(temp)
#Because the confidence interval for our sample is 98.122->98.37646, and the p value << 0.05, the null hypothesis can be rejected. Our sample mean is significantly different from the population mean.
#Q1.4
maleT=filter(temp,Gender='M') %>% select(.,Body.Temp)
#Because the confidence interval for our sample is 98.122->98.37646, and the p value << 0.05, the null hypothesis can be rejected. Our sample mean is significantly different from the population mean.
#Q1.4
maleT=filter(temp,Gender=='M') %>% select(.,Body.Temp)
maleT=filter(temp,Gender=='F') %>% select(.,Body.Temp)
femaleT=filter(temp,Gender=='F') %>% select(.,Body.Temp)
t.test(maleT,femaleT, alternative = "two.sided")
#Because the confidence interval for our sample is 98.122->98.37646, and the p value << 0.05, the null hypothesis can be rejected. Our sample mean is significantly different from the population mean.
#Q1.4
maleT=filter(temp,Gender=='Male') %>% select(.,Body.Temp)
femaleT=filter(temp,Gender=='Female') %>% select(.,Body.Temp)
t.test(maleT,femaleT, alternative = "two.sided")
#Q1.5
femaleHR=filter(temp,Gender=='Female') %>% select(.,Heart.Rate)
maleHR=filter(temp,Gender=='Male') %>% select(.,Heart.Rate)
var.test(femaleHR,maleHR,alternative="less")
var.test(femaleHR[1],maleHR[1],alternative="less")
var.test(femaleHR[[1]],maleHR[[1],alternative="less")
var.test(femaleHR[[1]],maleHR[[1]],alternative="less")
library(datasets)
df=load(PlantGrowth)
load(PlantGrowth)
load('PlantGrowth')
df=PlantGrowth
head(df)
boxplot(df$weight,main="Comparing plant weight")
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
boxplot(df~category,main="Comparing plant weight")
boxplot(df~Category,main="Comparing plant weight")
head(df)
dfG=group_by(df,group)
boxplot(df,main="Comparing plant weight")
boxplot(dfG$weight,main="Comparing plant weight")
boxplot(dfG,main="Comparing plant weight")
str(df)
unique(group)
unique(df$group)
?boxplot
boxplot(df$weight~group,main="Comparing plant weight")
boxplot(df$weight~unique(df$group),main="Comparing plant weight")
boxplot(df$weight~df$group,main="Comparing plant weight")
plantG=group_by(df,group)
summarise(plantG,std(weight))
summarise(plantG,sd(weight))
?barlett.test
summarise(plantG,sd(weight))
?barlett.test
??barlett.test
??bartlett.test
bartlett.test(df$weight,df$group)
summary(aov(df$weight ~ df$group))
summary(aov(df$weight ~ df$group)): #sigficant difference between groups
df1=filter(df,group=='trt1')
df2=filter(df,group=='trt2')
df0=filter(df,group=='ctrl')
t.test(df1,df2)
t.test(df1$weight,df2$weight)
View(df1)
View(df1)
View(df)
View(df0)
View(df1)
summary(aov(df$weight ~ df$group)): #sigficant difference between groups
df1=filter(df,group=='trt1')
summary(aov(df$weight ~ df$group)): #sigficant difference between groups
df1=filter(df,group=='trt1')
df=PlantGrowth
summary(aov(df$weight ~ df$group)): #sigficant difference between groups
df1=filter(df,group=='trt1')
boxplot(df$weight~df$group,main="Comparing plant weight")
df2=filter(df,group=='trt2')
summary(aov(df$weight ~ df$group)): #sigficant difference between groups
df1=filter(df,group=='trt1')
summary(aov(df$weight ~ df$group)): #sigficant difference between groups
dfPlant1=filter(df,group=='trt2')
summary(aov(df$weight ~ df$group)): #sigficant difference between groups
dfPlant1=df
summary(aov(df$weight ~ df$group)): #sigficant difference between groups
dfPlant1=df
library(datasets)
df=PlantGrowth
head(df)
plantG=group_by(df,group)
boxplot(df$weight~df$group,main="Comparing plant weight")
summarise(plantG,sd(weight))
bartlett.test(df$weight,df$group)
summary(aov(df$weight ~ df$group)) #sigficant difference between groups
df1=filter(df,group=='trt1')
df2=filter(df,group=='trt2')
df0=filter(df,group=='ctrl')
t.test(df1$weight,df2$weight)
t.test(df1$weight,df2$weight,alternative="two-sided")
t.test(df1$weight,df2$weight,alternative="two.sided")
# t test results indicates difference betwen 1 and 2
t.test(df0$weight,df1$weight,alternative="two.sided")
# t test results indicate no difference between 1 and 0
t.test(df0$weight,df2$weight,alternative="two.sided")
bartlett.test(df$weight,df$group)
dfHEC=HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
head(dfHEC)
str(dfHEC)
dfHEC
class(dfHEC)
dfHEC=HairEyeColor
# below average: the complimentary parts
filter(dfHEC,dfHEC$Sex='Female')
# below average: the complimentary parts
filter(dfHEC,dfHEC$Sex=='Female')
?table
# below average: the complimentary parts
dfHEC(female)
# below average: the complimentary parts
dfHEC[,,2]
# below average: the complimentary parts
dfHEC[,1:2,2]
# below average: the complimentary parts
dfHEC1=dfHEC[,1:2,2]
class(dfHEC1)
mosaicplot(dfHEC1, shade = TRUE)
# brown hair + brown eye and blond hair+blue eye are above expected
chisq.test(dfHEC1)
mosaicplot(dfHEC1, shade = TRUE)
str(dfHEC1)
# brown hair + brown eye and blond hair+blue eye are above expected
chisq.test(dfHEC1[c(1,4),])
# brown hair + brown eye and blond hair+blue eye are above expected
chisq.test(dfHEC1[c(1,3),])
# brown hair + brown eye and blond hair+blue eye are above expected
chisq.test(dfHEC1[c(1,2),])
# brown hair + brown eye and blond hair+blue eye are above expected
chisq.test(dfHEC1[c(1,2),])
chisq.test(dfHEC1[c(1,3),])
chisq.test(dfHEC1[c(1,4),])
chisq.test(dfHEC1[c(2,3),])
chisq.test(dfHEC1[c(2,4),])
chisq.test(dfHEC1[c(3,4),])
chisq.test(dfHEC1[c(2,4),])
chisq.test(dfHEC1[c(2,3),])
# brown hair + brown eye and blond hair+blue eye are above expected
chisq.test(dfHEC1[c(1,2),])
chisq.test(dfHEC1[c(1,3),])
chisq.test(dfHEC1[c(1,4),])
chisq.test(dfHEC1[c(2,3),])
mosaicplot(dfHEC1, shade = TRUE)
# Q1.1+Q1.2
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
cor(temp$Body.Temp, y = temp$Heart.Rate, use = "everything",
method = "pearson")
shiny::runApp('shinyproject/PInetwork')
?replicate
?Reduce
?seq_len
seq_len
sen_len(3)
seq_len(3)
?rbind
?reduce
1:3 %>% reduce(`+`)
reduce(c(1:3),'+')
reduce(1:3,'+')
reduce(1:3,`+`)
library(purrr)
reduce(1:3,`+`)
?Reduce
detach("package:scholar", unload=TRUE)
remove.packages('scholar')
devtools::install("scholar")
runApp('shinyproject/PInetwork')
detach("package:scholar", unload=TRUE)
remove.packages('scholar')
devtools::install("scholar")
runApp('shinyproject/PInetwork')
runApp('shinyproject/PInetwork')
libray(scholar)
libray('scholar')
library('scholar')
shiny::runApp('shinyproject/PInetwork')
authornames=c('Graham','McKinley','Matar','Kalliadasis','Karpitschka','Lauga','Cates','Stone','Arnold','Morris')
length(authornames)
authornames=c('Graham','McKinley','Matar','Kalliadasis','Karpitschka','Lauga','Cates','Stone','Arnold','Morris')
authorIDs=c('BK1w9CMAAAAJ','uLxFfGkAAAAJ','mLXz_NAAAAAJ','71Vf8GEAAAAJ','nKvTMosAAAAJ','pCZrETgAAAAJ','dxG_sPMAAAAJ','GfNjESUAAAAJ','wil5NhcAAAAJ','whV8vY0AAAAJ')
?list
list_authordfs=list()
author.names=c('Graham','McKinley','Matar','Kalliadasis','Karpitschka','Lauga','Cates','Stone','Arnold','Morris')
author.IDs=c('BK1w9CMAAAAJ','uLxFfGkAAAAJ','mLXz_NAAAAAJ','71Vf8GEAAAAJ','nKvTMosAAAAJ','pCZrETgAAAAJ','dxG_sPMAAAAJ','GfNjESUAAAAJ','wil5NhcAAAAJ','whV8vY0AAAAJ')
setNames(replicate(10,data.frame()),author.names)
author_names=c('Graham','McKinley','Matar','Kalliadasis','Karpitschka','Lauga','Cates','Stone','Arnold','Morris')
author_IDs=c('BK1w9CMAAAAJ','uLxFfGkAAAAJ','mLXz_NAAAAAJ','71Vf8GEAAAAJ','nKvTMosAAAAJ','pCZrETgAAAAJ','dxG_sPMAAAAJ','GfNjESUAAAAJ','wil5NhcAAAAJ','whV8vY0AAAAJ')
listsetNames(replicate(10,data.frame()),author_names)
list_authordfs=setNames(replicate(10,data.frame()),author_names)
for (i in c(1:10)){
list[[i]] =get_coauthors(author_IDs[i],n_coauthors = 50,n_deep = 1)
}
source('~/R/grabscholar.R', echo=TRUE)
library('scholar')
source('~/R/grabscholar.R', echo=TRUE)
list_authordfs[[1]]
list_authordfs[[2]]
list_authordfs[[3]]
list_authordfs[[4]]
list_authordfs[[5]]
listcanw1=list_authordfs[[1:5]]
list_authordfs[[5]]
listcanw1=list_authordfs[1:5]
listcanw1[[5]]
author_names=c('Graham','McKinley','Matar','Kalliadasis','Karpitschka','Lauga','Cates','Stone','Arnold','Morris')
author_IDs=c('BK1w9CMAAAAJ','uLxFfGkAAAAJ','mLXz_NAAAAAJ','71Vf8GEAAAAJ','nKvTMosAAAAJ','pCZrETgAAAAJ','dxG_sPMAAAAJ','GfNjESUAAAAJ','wil5NhcAAAAJ','whV8vY0AAAAJ')
list_authordfs=setNames(replicate(5,data.frame()),author_names(6:10))
source('~/R/grabscholar.R', echo=TRUE)
author_names=c('Graham','McKinley','Matar','Kalliadasis','Karpitschka','Lauga','Cates','Stone','Arnold','Morris')
author_IDs=c('BK1w9CMAAAAJ','uLxFfGkAAAAJ','mLXz_NAAAAAJ','71Vf8GEAAAAJ','nKvTMosAAAAJ','pCZrETgAAAAJ','dxG_sPMAAAAJ','GfNjESUAAAAJ','wil5NhcAAAAJ','whV8vY0AAAAJ')
list_authordfs=setNames(replicate(5,data.frame()),author_names(6:10))
list_authordfs=setNames(replicate(5,data.frame()),author_names[6:10])
library('scholar')
for (i in c(6:10)){
list_authordfs[[i-5]] =get_coauthors(author_IDs[i],n_coauthors = 50,n_deep = 1)
}
listcanw1[6:9]=list_authordfs[1:4]
library(scholar)
dfsample=get_coauthors('whV8vY0AAAAJ',n_coauthors = 50,n_deep=1)
listtest=setNames(replicate(5,vector()),author_names(6:10))
lnames=c('a','b','c')
a=c(1,2)
b='d'
c=c(3,4)
listest=list(a,b,c)
lapply(listtest,print())
lapply(listtest,print)
lapply(listtest,cat())
lapply(listtest,cat
)
lapply(listest,cat())
lapply(listest,cat
)
lapply(listest,print)
lapply(listest,=NULL)
lapply(listest,NULL)
listcanw1[[10]=dfsample
listcanw1[[10]]=dfsample
source('~/R/shinyproject/PInetwork/global.R', echo=TRUE)
listtest=lapply(listcanw1,get_vis_nodes)
listtest[[1]]
for i in c(1:10){
write.csv(listcanw1[[i]],file=author_IDs[1])
}
for i in c(1:10){
write.csv(listcanw1[[i]],author_IDs[1])
}
for i in c(1:10) {
write.csv(listcanw1[[i]],author_IDs[1])
}
for i in c(1:10) {
write.csv(listcanw1[[i]],author_IDs[1])
}
write.csv(listcanw1[[i]],author_IDs[i])
for i in c(1:10) {
write.csv(listcanw1[[i]],author_IDs[i])
}
?write.csv2
write.csv2(listcanw1[[i]],author_IDs[i])
for i in c(1:10){
write.csv2(listcanw1[[i]],author_IDs[i])
}
source('~/R/grabscholar.R', echo=TRUE)
write.csv(listcanw1[[i]],author_IDs[i])
source('~/R/grabscholar.R', echo=TRUE)
my_IDs=c('BK1w9CMAAAAJ','uLxFfGkAAAAJ','mLXz_NAAAAAJ',
'71Vf8GEAAAAJ','nKvTMosAAAAJ','pCZrETgAAAAJ',
'dxG_sPMAAAAJ','GfNjESUAAAAJ','wil5NhcAAAAJ','whV8vY0AAAAJ')
pathex='./data/'
paste0(pathex,my_IDs[1])
?rbind
my_author_names=c('Graham','McKinley','Matar',
'Kalliadasis','Karpitschka','Lauga',
'Cates','Stone','Arnold','Morris')
my_IDs=c('BK1w9CMAAAAJ','uLxFfGkAAAAJ','mLXz_NAAAAAJ',
'71Vf8GEAAAAJ','nKvTMosAAAAJ','pCZrETgAAAAJ',
'dxG_sPMAAAAJ','GfNjESUAAAAJ','wil5NhcAAAAJ','whV8vY0AAAAJ')
library(scholar)
library(dplyr)
library(igraph)
library(visNetwork)
my_df=data.frame()
for (i in c(1:10)){
pathtodata='./data/'
pathtodata=paste0(pathtodata,my_IDs[i])
pathtodata=paste0(pathtodata,'.csv')
mydf=rbind(mydf,read.csv(pathtodata))
}
for (i in c(1:10)){
pathtodata='./data/'
pathtodata=paste0(pathtodata,my_IDs[i])
pathtodata=paste0(pathtodata,'.csv')
my_df=rbind(my_df,read.csv(pathtodata))
}
setwd("~/R/shinyproject/PInetworkDemo")
for (i in c(1:10)){
pathtodata='./data/'
pathtodata=paste0(pathtodata,my_IDs[i])
pathtodata=paste0(pathtodata,'.csv')
my_df=rbind(my_df,read.csv(pathtodata))
}
for (i in c(1:10)){
pathtodata='./data/'
pathtodata=paste0(pathtodata,my_IDs[i])
my_df=rbind(my_df,read.csv(pathtodata))
}
str(my_df)
my_df=select(my_df,-1)
for (i in c(1:10)){
pathtodata='./data/'
pathtodata=paste0(pathtodata,my_IDs[i])
df_to_add=read.csv(pathtodata) %>% select(.,-1) %>% mutate(.,Hub=my_IDs[i])
my_df=rbind(my_df,df_to_add)
}
my_df=data.frame()
for (i in c(1:10)){
pathtodata='./data/'
pathtodata=paste0(pathtodata,my_IDs[i])
df_to_add=read.csv(pathtodata) %>% select(.,-1) %>% mutate(.,Hub=my_IDs[i])
my_df=rbind(my_df,df_to_add)
}
head(my_df)
my_df=data.frame()
for (i in c(1:10)){
pathtodata='./data/'
pathtodata=paste0(pathtodata,my_IDs[i])
df_to_add=read.csv(pathtodata) %>% select(.,-1) %>% mutate(.,Hub=author[1])
my_df=rbind(my_df,df_to_add)
}
head(my_df)
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
network_extract('BK1w9CMAAAAJ'')
''
network_extract('BK1w9CMAAAAJ')
class(my_df[,3])
my_df=data.frame()
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
network_extract('BK1w9CMAAAAJ')
head(my_df)
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
network_extract('BK1w9CMAAAAJ')
my_df[1,1]
class(my_df[1,1])
my_df %>% select(.,-3)[1:5,]
my_df
my_df %>% select(.,-3)
my_df %>% select(.,-3) [c(1:5),]
my_df[1:5,] %>% select(.,-3)
unique(my_df[1:10,1])[1:2]
unique(my_df[1:"100",1])[1:2]
class(unique(my_df[1:"100",1])[1:2])
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
listest
listest[1][1]
listest[[1]][1]
?simplify
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
network_extract('
wil5NhcAAAAJ')
network_extract('wil5NhcAAAAJ')
my_df
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
network_extract('wil5NhcAAAAJ')
runApp()
runApp()
runApp()
runApp()
dftest=network_extract(GfNjESUAAAAJ)
dftest=network_extract('GfNjESUAAAAJ'')
''
dftest=network_extract('GfNjESUAAAAJ')
dftest
coauthor_slice(dftest,5)
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
coauthor_slice(dftest,5)
uniquid(dftest[,1])
uniquie(dftest[,1])
unique(dftest[,1])
unique(dftest[,1])[0:6]
dftest[1:5,]
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
runApp()
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
runApp()
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
runApp()
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
runApp()
dftest=network_extract('GfNjESUAAAAJ')
caslice=coauthor_slice(dftest,5)
dftest1=coauthor_process(dftest,5,caslice = caslice)
dftest1
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
caslice=coauthor_slice(dftest,5)
caslice
dftest1=coauthor_process(dftest,5,caslice = caslice)
dftest1
dftest
caslice
class(caslice)
?append
append(caslice,0,'HS')
append(caslice,'HS',after=0)
caslice(0)
caslice[0]
caslice[1]
slice1=append(caslice,'HS',after=0)
slice1[1]
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
runApp()
source('~/R/shinyproject/PInetworkDemo/global.R', echo=TRUE)
runApp()
runApp()
